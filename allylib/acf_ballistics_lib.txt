--@name acf_ballistics_lib
--@author Ally for Hire / Merydian9
--@server

--- Version 1.0.0
-- Total implementation
-- *This is basically just a re-write of the livesim project

--- Version 1.0.1
-- Slightly refined accuracy

--- Version 1.0.2
-- Improved interpolation output of capped function

--- Version 1.0.3
-- Improved accuracy 

--- Version 1.1.0
-- Refined bisection method considerably by calculating direct-to-target pitch
-- *This is a HUGE optimization improvement
-- Made the 'generate_ballistics_capped' function public

--- Version 1.1.1
-- Merged generate_ballistics_table and generate_ballistics_capped internally

--- Version 1.1.2
-- Added capability to just output pitch without given time

--- Version 1.1.3
-- *I hate this many versions for small changes but what can you do
-- Updated logic function with complexity option
-- Fixed output logic

-- Constants
local GRAVITY = physenv.getGravity()
local TIMESTEP = game.getTickInterval()
local UNITS = 39.37
local MAXTIME = 99999
local DRAGDIV = 40

-- Internal combined function
local function generate_ballistics(gun, angle, simplicity, cap, time_cap, returnTable)
    local bullet_accel = Vector2(0, GRAVITY[3])
    local bullet_timestep = TIMESTEP * simplicity
    local bullet_flighttime = 0
    local bullet_muzzlevel = gun:acfMuzzleVel() * UNITS
    local bullet_dragcoef = gun:acfDragCoef() * UNITS

    local angle_muls = Vector2(math.cos(math.rad(angle)), math.sin(math.rad(angle)))
    local muzzle_attachment = gun:getAttachment(gun:lookupAttachment("muzzle"))
    local muzzle_pos = Vector(muzzle_attachment[1], muzzle_attachment[2], muzzle_attachment[3])
    local muzzle_dist = gun:getMassCenterW():getDistance(muzzle_pos)

    local bullet_pos = angle_muls * muzzle_dist
    local bullet_vel = angle_muls * bullet_muzzlevel

    local prev_pos = bullet_pos
    local prev_time = bullet_flighttime

    local bullet_table = returnTable and {} or nil

    while bullet_flighttime < (time_cap or MAXTIME)
        and bullet_pos[2] > 0
        and (returnTable or bullet_pos[1] < cap) do

        if returnTable then
            table.insert(bullet_table, {bullet_pos, bullet_vel, bullet_flighttime})
        else
            prev_pos = bullet_pos
            prev_time = bullet_flighttime
        end

        local drag = (bullet_dragcoef * bullet_vel:getLength()^2) / DRAGDIV
        local clampedflight = bullet_vel:getLength() * 0.9
        drag = bullet_vel:getNormalized() * math.min(drag * bullet_timestep, clampedflight)

        bullet_pos = bullet_pos + (bullet_vel * bullet_timestep)
        bullet_vel = bullet_vel + (bullet_accel * bullet_timestep - drag)
        bullet_flighttime = bullet_flighttime + bullet_timestep
    end

    if returnTable then
        return bullet_table
    else
        local delta_x = bullet_pos[1] - prev_pos[1]
        local lerp_factor = (cap - prev_pos[1]) / delta_x
        lerp_factor = math.max(0, math.min(1, lerp_factor))

        local interp_pos = prev_pos + (bullet_pos - prev_pos) * lerp_factor
        local interp_time = prev_time + (bullet_flighttime - prev_time) * lerp_factor

        return {interp_pos, interp_time}
    end
end

-- Calculates the maximum distance the gun can fire using a 40 elevation
local function calculate_maximum_distance(gun)
    if not isValid(gun) then return end
    local data = generate_ballistics(gun, 40, 1, nil, nil, true)
    return data[#data][1][1]
end

-- Finds best firing angle for a target position using bisection
local function logic(gun, position, time, complexity)
    local distance = gun:getPos():getDistance(position)
    local vertical = position[3] - gun:getPos()[3]
    local direct = math.deg(math.asin(vertical / distance)) 

    local low = direct - 1
    local high = math.min(direct + 41, 89)
    local mid = (low + high) / 2
    local comparison = vertical
    local test = {}

    while (high - low) > 0.1 do
        mid = (low + high) / 2
        test = generate_ballistics(gun, mid, complexity * 8, distance, MAXTIME, false)
        if test[1][2] > comparison then
            high = mid
        else
            low = mid
        end
    end
    
    if time == nil then return nil, mid end
    
    local outputData = generate_ballistics(gun, mid, complexity, 9999999, time, false)
    return outputData, mid
end

print("Ballistics Lib v1.1.3 Loaded")
return {
    generate_ballistics = generate_ballistics,
    generate_ballistics_table = function(g, a, s)
        return generate_ballistics(g, a, s, nil, nil, true)
    end,
    generate_ballistics_capped = function(g, a, c, t, s)
        return generate_ballistics(g, a, s or 1, c, t, false)
    end,
    calculate_maximum_distance = calculate_maximum_distance,
    logic = function(g, p, t, c)
        return logic(g, p, t, c or 1)
    end
}
