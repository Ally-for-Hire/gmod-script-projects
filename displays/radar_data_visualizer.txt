--@name Radar Data Visualizer
--@author Ally for Hire / Merydian9
--@shared

-- Version 1.2.2

if SERVER then
    -- SERVER VARIABLES HERE
    local positions = {}
    local velocities = {}
    local owners = {}
    local ids = {}
    local lastUpdate = timer.curtime()
    local count = 0
    
    -- SERVER FUNCTIONS HERE
    local function handleInput (inputName, inputValue)
        count = count + 1
        if count < 4 then return end
        count = 0
        
        positions = wire.ports.Position
        velocities = wire.ports.Velocity
        owners = wire.ports.Owner
        ids = wire.ports.IDs
        
        if not (#positions == #velocities and #velocities == #owners and #owners == #ids) then return end
        if (timer.curtime() - lastUpdate) < 0.1 then return end
                
        lastUpdate = timer.curtime()
                
        net.start("updateValues")
            net.writeInt(#positions, 16)
            for i = 1, #positions do
                net.writeVector(positions[i])
                net.writeVector(velocities[i])
                net.writeString(owners[i])
                net.writeInt(ids[i], 16)
            end
        net.send(owner(), true)       
    end
    
    -- SERVER HOOKS HERE
    hook.add("input", "Update Inputs", handleInput)
    wire.adjustPorts({Position = "array", Velocity = "array", Owner = "array", IDs = "array"}, {})

end

if CLIENT then
    if player() ~= owner() then return end
    
    -- CLIENT VARIABLES HERE
    local box_size = 40
    local last_update = 0
    local type = 2
    local times = {}
    
    if server_positions == nil then
        server_positions = {}
        server_velocities = {}
        server_owners = {}
        server_ids = {}
    end
    
    local col_black = Color(0, 0, 0)
    local col_black_noalpha = Color(0, 0, 0, 0)
    local col_red = Color(255, 0, 0)
    local col_green = Color(0, 255, 0)
    local col_blue = Color(0, 0, 255)
    local col_white = Color(255, 255, 255)
    
    local col_main = col_white
    
    local font_main = render.createFont("FontAwesome", 16, 800, nil, nil, nil, true)
    local font_small = render.createFont("FontAwesome", 12, 400, nil, nil, nil, true)
    
    local last_hud_update = 0
    
    -- CLIENT FUNCTIONS HERE
    -- Updating variables
    local function updateVariables ()
        local count = net.readInt(16)
        
        local new_server_positions, new_server_velocities, new_server_owners, new_server_ids = {}, {}, {}, {}
        
        for i = 1, count do
            new_server_positions[#new_server_positions + 1] = net.readVector()
            new_server_velocities[#new_server_velocities + 1] = net.readVector()
            new_server_owners[#new_server_owners + 1] = net.readString()
            new_server_ids[#new_server_ids + 1] = net.readInt(16)
        end
        
        for i = 1, count do
            if server_positions[i] != new_server_positions[i] then
                times[new_server_ids[i]] = timer.curtime()    
            end
        end
        
        server_positions, server_velocities, server_owners, server_ids = new_server_positions, new_server_velocities, new_server_owners, new_server_ids
        
        last_update = timer.curtime()
    end
    
    -- Local overwrites
    local drawCircle = render.drawCircle
    local drawRect = render.drawRect
    local drawLine = render.drawLine
    local drawRectOutline = render.drawRectOutline
    local drawSimpleText = render.drawSimpleText
    local drawPoly = render.drawPoly
    local setColor = render.setColor
    local setFont = render.setFont
    
    -- Hud elements
    local function drawRectOutlineCent (x, y, w, h, s) drawRectOutline(x - w / 2, y - h / 2, w, h, s) end
    local function drawThickLine (x1, y1, x2, y2, thickness)
        local perpDir = Vector( y2 - y1, -( x2 - x1 ), 0 ):getNormalized() * thickness / 2
        local perpX = perpDir[1]
        local perpY = perpDir[2]
    
        drawPoly({
            { x = x1 + perpX, y = y1 + perpY },
            { x = x2 + perpX, y = y2 + perpY },
            { x = x2 - perpX, y = y2 - perpY },
            { x = x1 - perpX, y = y1 - perpY },
        })
    end
    local function drawColoredBox (x, y, boxColor, outline)
        if outline then
            setColor(col_black)
            drawRectOutlineCent(x, y, box_size + 2, box_size + 2, 1)
            drawRectOutlineCent(x, y, box_size - 4, box_size - 4, 1)
        end
        
        setColor(boxColor)
        drawRectOutlineCent(x, y, box_size, box_size, 2)    
    end
    local function drawRenderTarget(x, y, name, sizex, sizey)
        if sizey == nil then sizey = sizex end
        
        render.setRenderTargetTexture(name)
        render.drawTexturedRect(x - sizex / 2, y - sizey / 2, sizex, sizey)
        render.setRenderTargetTexture()    
    end

    -- Actual hud
    local function renderHud ()
        local x,y = render.getResolution()
        local x,y = x / 2, y / 2
        
        local minDist = 9999
        local minCoordsX, minCoordsY = 0, 0

        setColor(col_main)
        setFont(font_main)
        
        for key = 1, #server_positions do
            local dt = (timer.curtime() - times[server_ids[key]])
            
            local targetPos = server_positions[key] 
            local targetInterpolatedPos = server_positions[key] + server_velocities[key] * (dt + 0.05)
            local coords = targetPos:toScreen()
            local interpolatedCoords = targetInterpolatedPos:toScreen()
            
            if dt < 0.5 then
                coords = interpolatedCoords
            end
            
            drawRenderTarget(coords.x, coords.y, "targetBox", 1024)
            drawSimpleText(coords.x + box_size / 2 + 5, coords.y - box_size / 2, server_owners[key], TEXT_ALIGN.LEFT, TEXT_ALIGN.TOP)
            drawSimpleText(coords.x + box_size / 2 + 5, coords.y + box_size / 2, math.round(server_velocities[key]:getLength() / 17.6) .. "KM/H", TEXT_ALIGN.LEFT, TEXT_ALIGN.BOTTOM)
            
            if dt > 0.5 then
                render.drawLine(coords.x - 15, coords.y - 15, coords.x + 15, coords.y + 15)    
                render.drawLine(coords.x + 15, coords.y - 15, coords.x - 15, coords.y + 15) 
                render.drawRectOutline(coords.x - 15, coords.y - 15, 30, 30, 1)
            end
            
        end    
        
        last_hud_update = timer.curtime()   
    end
    
    local function createStaticElements ()
        -- Important screen variables
        local x, y = render.getResolution()
        local x, y = x / 2, y / 2
        
        -- Target box
        render.createRenderTarget("targetBox")
        render.selectRenderTarget("targetBox")
        render.clear(col_black_noalpha)
        setFont(font_main)
        
        if type == 1 then
            setColor(col_black)
            drawThickLine(x + box_size / 2 + 2, y + box_size / 2, x + box_size / 2 - 15 - 2, y + box_size / 2, 5)
            drawThickLine(x + box_size / 2, y + box_size / 2 + 2, x + box_size / 2, y + box_size / 2 - 15 - 2, 5)
            drawThickLine(x - box_size / 2 - 2, y + box_size / 2, x - box_size / 2 + 15 + 2, y + box_size / 2, 5)
            drawThickLine(x - box_size / 2, y + box_size / 2 + 2, x - box_size / 2, y + box_size / 2 - 15 - 2, 5)
            
            drawThickLine(x + box_size / 2 + 2, y - box_size / 2, x + box_size / 2 - 15 - 2, y - box_size / 2, 5)
            drawThickLine(x + box_size / 2, y - box_size / 2 - 2, x + box_size / 2, y - box_size / 2 + 15 + 2, 5)
            drawThickLine(x - box_size / 2 - 2, y - box_size / 2, x - box_size / 2 + 15 + 2, y - box_size / 2, 5)
            drawThickLine(x - box_size / 2, y - box_size / 2 - 2, x - box_size / 2, y - box_size / 2 + 15 + 2, 5)
            
            setColor(col_main)
            drawThickLine(x + box_size / 2, y + box_size / 2, x + box_size / 2 - 15, y + box_size / 2, 2)
            drawThickLine(x + box_size / 2, y + box_size / 2, x + box_size / 2, y + box_size / 2 - 15, 2)
            drawThickLine(x - box_size / 2, y + box_size / 2, x - box_size / 2 + 15, y + box_size / 2, 2)
            drawThickLine(x - box_size / 2, y + box_size / 2, x - box_size / 2, y + box_size / 2 - 15, 2)
            
            drawThickLine(x + box_size / 2, y - box_size / 2, x + box_size / 2 - 15, y - box_size / 2, 2)
            drawThickLine(x + box_size / 2, y - box_size / 2, x + box_size / 2, y - box_size / 2 + 15, 2)
            drawThickLine(x - box_size / 2, y - box_size / 2, x - box_size / 2 + 15, y - box_size / 2, 2)
            drawThickLine(x - box_size / 2, y - box_size / 2, x - box_size / 2, y - box_size / 2 + 15, 2)
        elseif type == 2 then
            setColor(col_black)
            drawThickLine(x - 2, y, x + 22, y, 5)
            drawThickLine(x + 20, y - 7, x + 20, y + 7, 5)
            drawRect(x - 4, y - 4, 8, 8)
            
            setColor(col_main)
            drawThickLine(x, y, x + 20, y, 2)
            drawThickLine(x + 20, y - 5, x + 20, y + 5, 2)
            drawRect(x - 2.5, y - 2.5, 5, 5)
        end
        --drawSimpleText(x + box_size / 2 + 5, y + box_size / 2, "VEL: ", TEXT_ALIGN.LEFT, TEXT_ALIGN.BOTTOM)
        
        -- Remove after, we only need to do this once
        hook.remove("renderoffscreen", "Create Rendertargets")     
    end
    
    -- CLIENT HOOKS HERE
    hook.add("drawhud", "Visualize Information", renderHud)
    hook.add("renderoffscreen", "Create Rendertargets", createStaticElements)
    net.receive("updateValues", updateVariables)
end

