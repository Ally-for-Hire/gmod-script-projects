--@name Jet Gunsight Test
--@author Ally
--@include lib/modular_wire_helper.txt

if SERVER then
    local screen = chip():getLinkedComponents()[1]
    
    if not isValid(screen) then error "Not attached to an entity at all." end -- functions where the only argument is a string can be called as function "string argument"
    if screen:getClass() ~= "starfall_screen" then error "Not attached to a starfall screen." end
    
    screen:linkComponent(chip())
    screen:setColor(Color(255,255,255,1))
    
    hook.add("Removed", "reset screen", function()
        if isValid(screen) then
            screen:setColor(Color(255,255,255,255))
        end
    end)    
    
    require "lib/modular_wire_helper.txt"
    setIO(
        parseE2IO("Base:entity CamPos:vector FOV")
    ) 
    
    screenHolo = hologram.create(chip():getPos(), Angle(), "models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl", Vector(0)) 
    screenHolo:setParent(chip())       
    
    hook.add("input","",function(name,value)
        if name == "CamPos" and value ~= nil then 
            net.start("CamPosSend")
            net.writeVector(value)
            net.send()
            screenHolo:setPos(value + chip():getForward() * 100)
        elseif name == "Base" and value ~= nil then 
            net.start("BaseSend")
            net.writeEntity(value)
            net.send()
        elseif name == "FOV" and value ~= nil then 
            net.start("FOVSend")
            net.writeFloat(value)
            net.send()
        end     
  end)

    timer.simple( 1, function() -- Delay to ensure client has time to initialize the chip first
        net.start( "CamThing_DefineCamHolo" )
        net.writeEntity( screenHolo )
        net.send()
        net.start("BaseSend")
        net.writeEntity(wire.ports.Base)
        net.send()
    end )
    

else -- CLIENT    
    render.setBackgroundColor(Color(255,255,255,0), chip():getLinkedComponents()[1])
    
    local function center(x, y, w, h, ...) -- the ... allows you to specify an unlimited amount of arguments, read how varargs work in lua
        return x - (w / 2), y - (h / 2), w, h, ... -- return the modified x/y and the ... remaining arguments
    end
    
    local OverallScale = 0.5 -- Set the scale of the hud

    local ScreenText = render.createFont("Trebuchet", 18 * OverallScale, 1000 * OverallScale, true, false, false, false, 0.1, false, false)
    local CamPos = chip():getPos()
    local screenHolo = chip()
    local Base = chip()
    local FOV = 90
    local Scale = 90 / FOV * OverallScale
    local PolX = 0
    local PolY = 0
    
    local function _drawRectFast (x, y, a, b, c, d)
        render.drawRectFast(x + a * Scale, y + b * Scale, c * Scale, d * Scale)
    end
    local function _drawRectOutline (x, y, a, b, c, d, e)
        render.drawRectOutline(x + a * Scale, y + b * Scale, c * Scale, d * Scale, e * Scale)
    end
    local function _drawRect (x, y, a, b, c, d)
        render.drawRect(x + a * Scale, y + b * Scale, c * Scale, d * Scale)
    end
    local function toPol (x,y)
        local r = math.pow(x^2 + y^2, 1/2)
        local theta = math.atan(y/x) + math.rad(Base:getAngles().roll)
        PolX = r*math.cos(theta)
        PolY = r*math.sin(theta)
        return {x = PolX, y = PolY}  
    end
    
    hook.add("render", "render_hook", function()  
        if player() ~= owner() then return end
        local Position = screenHolo:getPos()
        local w, h = render.getResolution()
        --render.drawRectOutline(0,0, w, h)
        render.setColor(Color(0, 235, 0))    
        
        -- this next part sets up a custom view matrix so toScreen() returns screen-aligned instead of game-aligned vectors
        render.pushViewMatrix{ x = 0, y = 0, w = w, h = h, type = "2D" } -- functions where the only argument is a table can be called as function{table constructor}
        
        local playerPos2D = Position:toScreen() -- Elements in front of camera
        local x, y = playerPos2D.x, playerPos2D.y                 
            _drawRectFast(x, y, 3, 0, 5, 3)
            _drawRectFast(x, y, 0, 3, 3, 5)
            _drawRectFast(x, y, -3 - 2.5, 0, 5, 3)
            _drawRectFast(x, y, 0, -3 -2.5, 3, 5)
            
            _drawRectOutline(x, y, -120, -50, 35, 22, 3)
            _drawRectOutline(x, y, 80, -50, 50, 22, 3)        
            render.setFont(ScreenText)
            
            local mat = Matrix()
            mat:scale(Vector(1, 1, 1))--scale
            mat:translate(Vector(x, y))
            render.pushMatrix(mat)
            render.drawText(0, 0, "1412412414214", TEXT_ALIGN.CENTER)
            render.popMatrix()
                        
            
            toPol(-105 * Scale, -50 * Scale)
            render.drawText(x + PolX, y + PolY, "657", TEXT_ALIGN.CENTER) -- Speed
            
            render.drawText(x + 105 * Scale, y - 50 * Scale, "40000", TEXT_ALIGN.CENTER) -- Altitude
                  
            render.drawText(x + 135 * Scale, y - 25 * Scale, "P 97", TEXT_ALIGN.LEFT) -- Pitch
            render.drawText(x + 135 * Scale, y - 0 * Scale, "Y 367", TEXT_ALIGN.LEFT) -- Yaw        
            render.drawText(x + 135 * Scale, y + 25 * Scale, "G 1.9", TEXT_ALIGN.LEFT) -- G's        
            
            render.drawText(x - 135 * Scale, y - 25 * Scale, "THR 100", TEXT_ALIGN.RIGHT) -- Throttle
            render.drawText(x - 135 * Scale, y - 0 * Scale, "WEP: A9-4", TEXT_ALIGN.RIGHT) -- Weapon        
            render.drawText(x - 135 * Scale, y + 25 * Scale, "CNN: 2000", TEXT_ALIGN.RIGHT) -- Gun  
            
            render.drawText(x - 105 * Scale, y + 100 * Scale, "FLR: 64", TEXT_ALIGN.CENTER) -- Flares
            render.drawText(x + 105 * Scale, y + 100 * Scale, "LASE: ON ", TEXT_ALIGN.CENTER) -- Lasing
            
            --local coords = toPol(0, 10)
            --render.drawFilledCircle(x + toPol(0, 10).x, y + toPol(0, 10).y, 5, 5)
            
        local velocityPos = (Position + Base:getVelocity() / 1000):toScreen() -- Elements that move with Velocity Indicator
        local x, y = velocityPos.x, velocityPos.y
            _drawRectOutline(x, y, -6.5, -6.5, 13, 13, 3)
            
            _drawRect(x, y, -1.5, -15, 3, 10)
            _drawRect(x, y, -15, 0, 10, 3)
            _drawRect(x, y, 5, 0, 10, 3)
    
            render.enableScissorRect(x - 75 *Scale, y - 100 *Scale, x + 75 *Scale, y + 100 *Scale)        
            render.disableScissorRect()                
            
        render.popViewMatrix() -- exit out of custom view
    end)
    
    net.receive( "CamThing_DefineCamHolo", function()
        screenHolo = net.readEntity():toHologram()
    end )
    net.receive("BaseSend", function()
        Base = net.readEntity()   
    end)
    net.receive("CamPosSend", function()
        CamPos = net.readVector()   
    end)
    net.receive("FOVSend", function()
        FOV = net.readFloat()  
        Scale = 90 / FOV * OverallScale
        ScreenText = render.createFont("Trebuchet", 18 * Scale, 1000 * Scale, true, true, true, true, 0.1, true, true)
    end)
end