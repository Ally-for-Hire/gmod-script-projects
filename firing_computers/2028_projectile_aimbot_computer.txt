--@name 2028 Projectile Aimbot Computer
--@author Ally for Hire / Merydian9
--@include ../public_lib/acf_ballistics_lib.txt
--@shared
--@server

------------------------------------------------------------
-- Version History
------------------------------------------------------------
-- 1.0.0: Initial implementation
-- 1.0.1: Minor changes
-- 1.0.2: Fixed gun firing without solution
-- 1.0.3: Added ACF3 compatibility, fixed firing bug
-- 1.0.4: Added 'Fire' output
-- 1.0.5: Firing delay, cleanup, optimizations
-- 1.1.0: Major optimization, refined bisection, added options
-- 1.1.1: Improved bisection bounds, added final refinement
-- 1.1.2: Cleanup, globalized relativePos, fixed prediction
-- 1.2.0: Secant method, acceleration averaging
-- 1.3.0: Rollback fixes, better logic, accuracy improvements, mass cleanup

------------------------------------------------------------
-- Configurable Options
------------------------------------------------------------
local offset = 0.02                  -- Time offset in seconds
local recalcFullSim = false         -- Recalculate full sim every loop (low MV only)
local simplifiedMath = true        -- Use simplified math (no drag)
local handleFiring = true           -- Whether script should fire the gun
local firingRange = 1200000           -- Max intercept distance for firing
local firingAccuracy = 15            -- Acceptable aiming error in units

------------------------------------------------------------
-- Constants and Globals
------------------------------------------------------------
local GRAVITY = Vector2(0, physenv.getGravity()[3])
local TICK = game.getTickInterval()
local INTOM = 39.37

local gun = nil
local targetPos, targetVel, targetAccel = Vector(), Vector(), Vector()
local lastVel = Vector()
local lastFrame = timer.curtime()

local storedMuzzleVel, maxCalculatedRange, muzzleDist = 0, 0, 0
local relativePos, relativeVel, relativeAccel = Vector(), Vector(), Vector()
local predictedTargetPos, predictedRelativePos = Vector(), Vector()
local interceptionPos, aimposOutput = Vector(), Vector()
local fireOutput, timeOutput = 0, 0
local noSolution = true
local attemptingFire = false
local targetValue, dt, time = 0, 0, 0
local maxDeltaT, maxDeltaD = 1e-4, 15

local ballisticslib = require("../public_lib/acf_ballistics_lib.txt")

------------------------------------------------------------
-- Main Calculation Logic
------------------------------------------------------------
local function calculate()
    if storedMuzzleVel == 0 or targetPos == Vector() then return end

    relativeAccel = -Vector(0, 0, GRAVITY[2])
    if lastVel != targetVel then
        dt = timer.curtime() - lastFrame
        relativeAccel = relativeAccel + (targetVel - lastVel) / dt
        lastVel = targetVel
        lastFrame = timer.curtime()
    end

    relativePos = targetPos - gun:getPos()
    relativeVel = targetVel - gun:getVelocity()

    local minTime = relativePos:getLength() / (storedMuzzleVel * INTOM)
    local low, high = minTime / 2, minTime * 2

    local pitch = 0
    if not simplifiedMath then _, pitch = ballisticslib.logic(gun, targetPos) end

    local f0 = (relativePos + relativeVel * low + 0.5 * relativeAccel * low^2):getLength() - (storedMuzzleVel * INTOM * low)
    local f1 = (relativePos + relativeVel * high + 0.5 * relativeAccel * high^2):getLength() - (storedMuzzleVel * INTOM * high)

    if f0 * f1 > 0 then
        noSolution = true
        print("No solution in range")
        return
    end

    local error = 1000
    while math.abs(error) > maxDeltaD do
        predictedRelativePos = relativePos + relativeVel * high + 0.5 * relativeAccel * high^2
        predictedTargetPos = targetPos + targetVel * high + 0.5 * (relativeAccel + Vector(0, 0, GRAVITY[2])) * high^2

        targetValue = predictedRelativePos:getLength() - muzzleDist
        local selfValue = storedMuzzleVel * INTOM * high

        if not simplifiedMath then
            local sim = recalcFullSim
                and ballisticslib.logic(gun, predictedTargetPos, high, 8)
                or ballisticslib.generate_ballistics_capped(gun, pitch, targetValue, high, 8)
            selfValue = sim[1]:getLength()
        end

        error = targetValue - selfValue
        local denom = f1 - f0
        if math.abs(denom) < maxDeltaT then break end

        local next = high - f1 * (high - low) / denom
        if next < 0 then break end

        low, f0 = high, f1
        high = next
        f1 = (relativePos + relativeVel * high + 0.5 * relativeAccel * high^2):getLength() - (storedMuzzleVel * INTOM * high)
    end

    time = high
    noSolution = false
end

------------------------------------------------------------
-- Aiming + Firing Logic
------------------------------------------------------------
local function main()
    if handleFiring then fireOutput = 0 end
    if storedMuzzleVel == 0 or targetPos == Vector() then
        wire.ports.Fire = fireOutput
        return
    end

    timeOutput = time + dt
    interceptionPos = targetPos + relativeVel * (timeOutput + offset) + 0.5 * relativeAccel * (timeOutput + offset)^2
    aimposOutput = targetPos + relativeVel * (timeOutput + offset + TICK) + 0.5 * relativeAccel * (timeOutput + offset + TICK)^2

    if handleFiring and relativePos:getLength() < firingRange and not noSolution then
        local muzzle = gun:getAttachment(gun:lookupAttachment("muzzle"))
        local muzzleVec = Vector(muzzle[1], muzzle[2], muzzle[3])
        local gunFwd = gun:getForward()

        local toPrev = aimposOutput - muzzleVec
        local toIntercept = interceptionPos - muzzleVec

        local lateralError = (toPrev - gunFwd * toPrev:dot(gunFwd)):getLength()
        local isAimingAhead = toIntercept:dot(gunFwd) > toPrev:dot(gunFwd)

        if isAimingAhead and lateralError < firingAccuracy then
            fireOutput = 1
        end
    end

    wire.ports.Fire = fireOutput
    wire.ports.Time = timeOutput
    wire.ports.AimPos = aimposOutput
end


------------------------------------------------------------
-- Input Handling
------------------------------------------------------------
local function handleWire(name, value)
    if name == "Gun" then
        gun = value
    elseif name == "TargetPos" then
        targetPos = value
        calculate()
    elseif name == "TargetVel" then
        targetVel = value
    end
end

------------------------------------------------------------
-- Re-evaluate Ballistics Constantly
------------------------------------------------------------
timer.create("retry", 0.5, 0, function()
    if gun:isValid() and gun:acfMuzzleVel() == 0 then
        wire.ports.Fire = 1
        storedMuzzleVel = 0
    elseif gun:isValid() then
        if gun:acfMuzzleVel() != storedMuzzleVel then
            storedMuzzleVel = gun:acfMuzzleVel()
            maxCalculatedRange = ballisticslib.calculate_maximum_distance(gun)
            local attachment = gun:getAttachment(gun:lookupAttachment("muzzle"))
            local muzzlePos = Vector(attachment[1], attachment[2], attachment[3])
            muzzleDist = gun:localToWorld(Vector()):getDistance(muzzlePos)
            wire.ports.Fire = 0
        end
    end
end)

------------------------------------------------------------
-- Setup Wire Ports and Hooks
------------------------------------------------------------
wire.adjustPorts(
    { Gun = "entity", TargetPos = "vector", TargetVel = "vector" },
    { Fire = "number", Time = "number", AimPos = "vector" }
)

hook.add("input", "Wire Inputs Updated", handleWire)
hook.add("think", "Main Think", main)
