--@name Universal Datalink Root
--@author Ally for Hire / Merydian9
--@include ../public_lib/helpful_hud_functions.txt

--- Version 1.2.1

--- Universal1 System Root Explanation
-- First Stage: System Creation
/*
- When the U1 Root is spawned it searches for currently existing U1 Nodes to build its system
- After this, it creates the stream and prepares to recieve more nodes
*/
-- Second Stage: Data Transit
/*
- With its system identified, the U1 Root recieves all data from all nodes on a tick delay
- It then indexes all of the data using its own algorithm and sends it all out
- It also prepares to recieve new Nodes at any time
*/
-- Final Stage: Removal
/*
- The U1 Root identifies itself as removed on the system and moves all Nodes back into System Identification 
*/

-- Please do not use the U1 system ingame, it is extremely laggy
-- This is simply a tech demo I am releasing to the public, U4-5 
-- are considerabley less laggy, if you want to make your own don't
-- replicate this process as it's a very innefficient method.

local CLIENTDISPLAY = true

if SERVER then
    local currentVehicleTracks = {}
    local currentMissileTracks = {}
    local currentTracks = {currentVehicleTracks, currentMissileTracks}
    local stayTime = {3, 0.3}
    local recipients = {}
    
    local checkedIDs = {}
    local lastUpdate = timer.curtime()
    
    hook.add("remote", "Remote Response", function(sender, owner, payload)
        if sender == chip() then return end
    
        if payload == "Node Ping" or payload == "Master Response" then
            if payload == "Node Ping" then
                hook.runRemote(sender, "Master Ping")
            end
            recipients[sender:entIndex()] = sender
        elseif #payload > 0 then
            local positions = payload[1]
            local velocities = payload[2]
            local ids = payload[3]
            local owners = payload[4]
            local inputTime = payload[5]
            local tableType = payload[6]
    
            local curTime = timer.curtime()
            local curTable = currentTracks[tableType]
    
            for i = 1, #positions do
                local id = ids[i]
                if curTable[id] == nil or curTable[id][4] < inputTime then
                    curTable[id] = {positions[i], velocities[i], owners[i], inputTime}
                end
            end
            
            local curTime = timer.curtime()
            
            if (curTime - lastUpdate) < 0.1 then return end -- we only need to update information every 0.1s really
                        
            if CLIENTDISPLAY then
                net.start("Server Variable Update")
                net.writeTable(currentTracks)
                net.send()
            end
            
            lastUpdate = curTime
        end
    end)

    timer.create("Send Data", 0.1, 0, function()
        local v_pos, m_pos = {}, {}
        local v_vels, m_vels = {}, {}
        local v_owners, m_owners = {}, {}
        local v_ids, m_ids = {}, {}
        
        for i, track in pairs(currentVehicleTracks) do
            if (timer.curtime() - track[4]) > stayTime[1] then
                currentMissileTracks[i] = nil
                continue
            end
            
            v_pos[#v_pos + 1] = track[1]
            v_vels[#v_vels + 1] = track[2]
            v_owners[#v_owners + 1] = track[3]
            v_ids[#v_ids + 1] = i
        end
        
        for i, track in pairs(currentMissileTracks) do
            if (timer.curtime() - track[4]) > stayTime[2] then
                currentMissileTracks[i] = nil
                continue
            end
            
            m_pos[#m_pos + 1] = track[1]
            m_vels[#m_vels + 1] = track[2]
            m_owners[#m_owners + 1] = track[3]
            m_ids[#m_ids + 1] = i
        end
        
        for id, entity in pairs(recipients) do
            local sent = pcall(function() hook.runRemote(entity, {v_pos, v_vels, v_owners, v_ids, m_pos, m_vels, m_owners, m_ids}) end)
            if not sent then recipients[id] = nil end
        end
    end)
    
    hook.runRemote(nil, "Master Ping")
    
    wire.adjustPorts({}, {Tracks = "Table"})
elseif CLIENT and CLIENTDISPLAY then
    if player() != owner() then return end
    
    local currentVehicleTracks = {}
    local currentMissileTracks = {}
    local currentTracks = {currentVehicleTracks, currentMissileTracks}
    
    local lib = require("public_release_projects/public_lib/helpful_hud_functions.txt")
    
    local fontsmall = render.createFont("", 15, 1200, nil, nil, nil, true)
    
    local lastUpdate = timer.curtime()
    
    enableHud(player(), true)
    
    local function renderHud()
        local currentTime = timer.curtime()
        
        for key, value in pairs(currentVehicleTracks) do
            local pos = value[1]
            local x, y = pos:toScreen().x, pos:toScreen().y
            
            _setColor(COL_BLACK)
            render.drawRectRotated(x, y, 8, 8, 45)
            _setColor(COL_GREEN)
            render.drawRectRotated(x, y, 5, 5, 45)
            _setFont(fontsmall)
            -- _drawText(x, y - 7.5, key, TEXT_ALIGN.CENTER)
            _drawText(x + 10, y - 10 - 7.5, value[3])
            _drawText(x + 10, y + 10 - 7.5, math.round(value[2]:getLength() / 39.37) .. "M/S")
            _drawText(x, y, math.round(currentTime - lastUpdate, 1))
        end  
        
        for key, value in pairs(currentMissileTracks) do
            local pos = value[1]
            local x, y = pos:toScreen().x, pos:toScreen().y
            
            _setColor(COL_BLACK)
            drawCenterRect(x, y, 8, 4)
            drawCenterRect(x, y, 4, 8)
            _setColor(COL_RED)
            drawCenterRect(x, y, 5, 2)
            drawCenterRect(x, y, 2, 5)
            -- _drawCircle(x, y, 10)
            _setFont(fontsmall)
            _drawText(x + 10, y + 10 - 7.5, math.round(value[2]:getLength() / 39.37) .. "M/S")
        end    
    end
    
    net.receive("Server Variable Update", function()
        local data = net.readTable()
        currentVehicleTracks = data[1]
        currentMissileTracks = data[2]
        lastUpdate = timer.curtime()
    end)
    
    hook.add("drawhud", "Render HUD", renderHud)
end