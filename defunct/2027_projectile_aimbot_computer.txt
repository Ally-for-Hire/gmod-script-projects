--@name 2027 Projectile Aimbot Computer
--@author Ally for Hire / Merydian9
--@shared
--@server

------------------------------------------------------------
-- Version History
------------------------------------------------------------
-- 1.1.0: Comments added, fixed firing and data handling logic
-- 1.2.0: Fixed acceleration bug, cleaned up code
-- 1.3.0: Accuracy improvements, proper muzzle distance, cleaner outputs
-- 1.4.0: TIME_STEP refinement removed, fuze fix
-- 1.5.0: Acceleration + velocity cleanup, major optimizations
-- 1.5.1: Fixed ACF3 fire compatibility
-- 1.5.2: ACE compatibility hotfix
-- 1.6.0: Minor optimizations, added delay for fuzed weapons
-- 1.6.1: Muzzle dist correction
-- 1.7.0: Dot product aim logic, time minimum clamp
-- 1.7.11.7.4: Cleanup, logic fix, naming consistency
-- 1.8.0: Migrated control logic from 2028 base
-- 1.8.1: Binary search refinement
-- 1.8.2: Switched to distance-based bisection
-- 1.9.0: Complete cleanup, *functionality questionable

------------------------------------------------------------
-- Configurable Options
------------------------------------------------------------
local offset = 0.0
local handleFiring = true
local firingRange = 18000
local firingAccuracy = 0.3

------------------------------------------------------------
-- Constants
------------------------------------------------------------
local MAX_TIME = 2
local TIME_STEP = game.getTickInterval() / 2
local GRAVITY = Vector2(0, physenv.getGravity()[3])
local RAD_CONV = math.pi / 180
local TICK = game.getTickInterval()

------------------------------------------------------------
-- Internal State
------------------------------------------------------------
local gun = nil
local targetPos, targetVel = nil, nil
local lastVel = Vector()
local lastFrame = 0

local initialized = false
local storedMuzzleVel = 0
local maxCalculatedRange = 0
local pitchStep = 0
local pitchNumerator = 6
local muzzleDist = 0

local dataTable = {}
local aimposOutput = Vector()
local relativeVel = Vector()
local relativeAccel = Vector()
local targetValue = 0
local timeOutput = 0

------------------------------------------------------------
-- Utility: Interpolated Table Value
------------------------------------------------------------
local function interpolateTable(tbl, targetTime)
    if targetTime <= tbl[1][3] then return tbl[1][1] end
    if targetTime >= tbl[#tbl][3] then return tbl[#tbl][1] end
    for i = 1, #tbl - 1 do
        local t0, t1 = tbl[i][3], tbl[i + 1][3]
        if targetTime >= t0 and targetTime <= t1 then
            local d0, d1 = tbl[i][1], tbl[i + 1][1]
            local alpha = (targetTime - t0) / (t1 - t0)
            return d0 + (d1 - d0) * alpha
        end
    end
    return tbl[#tbl][1]
end

------------------------------------------------------------
-- Ballistics Generator: Given pitch, simulate shell
------------------------------------------------------------
local function generateAngleBallistics(gun, pitch, dt)
    local curtime = 0
    local dragCoef = gun:acfDragCoef()
    local muzzleData = gun:getAttachment(gun:lookupAttachment("muzzle"))
    local muzzlePos = Vector(muzzleData[1], muzzleData[2], muzzleData[3])
    muzzleDist = gun:localToWorld(Vector()):getDistance(muzzlePos)

    local muzzleVel = gun:acfMuzzleVel() * 39.37
    local direction = Vector2(math.cos(pitch), math.sin(pitch))
    local shellPos = direction * muzzleDist
    local shellVel = direction * muzzleVel

    while curtime < MAX_TIME and shellVel[1] > 0 do
        local drag = (dragCoef * shellVel:getLength()^2) / 40
        drag = shellVel:getNormalized() * (drag * dt * 39.37)
        shellPos = shellPos + shellVel * dt
        shellVel = shellVel + (GRAVITY * dt - drag)
        curtime = curtime + dt
        if shellPos[2] < 0 then break end
    end

    return {shellPos[1], shellPos[2], curtime}
end

------------------------------------------------------------
-- Build Ballistics Table (Runs Once)
------------------------------------------------------------
local function generateValues()
    if not gun or not gun:isValid() or gun:getClass() != "acf_gun" then return end

    local mv = gun:acfMuzzleVel()
    if mv == storedMuzzleVel then return end

    storedMuzzleVel = mv
    pitchStep = math.clamp(pitchNumerator / storedMuzzleVel, 0.002, 0.1)

    local muzzleData = gun:getAttachment(gun:lookupAttachment("muzzle"))
    local muzzlePos = Vector(muzzleData[1], muzzleData[2], muzzleData[3])
    local data = {gun:localToWorld(Vector()):getDistance(muzzlePos), 0, 0}
    dataTable[1] = data

    local pitch = 0
    local idx = 2
    while data[3] < MAX_TIME and pitch < 5 do
        data = generateAngleBallistics(gun, pitch * RAD_CONV, TIME_STEP)
        dataTable[idx] = data
        pitch = pitch + pitchStep
        idx = idx + 1
    end

    maxCalculatedRange = dataTable[idx - 1][1]
    initialized = true
end

------------------------------------------------------------
-- Solver: Predict Time-to-Intercept
------------------------------------------------------------
local function calculate()
    if storedMuzzleVel == 0 or not targetPos then return end

    relativeAccel = -Vector(0, 0, GRAVITY[2])
    local dt = timer.curtime() - lastFrame
    if lastVel != targetVel then
        relativeAccel = relativeAccel + (targetVel - lastVel) / dt
        lastVel = targetVel
        lastFrame = timer.curtime()
    end

    local relPos = targetPos - gun:getPos()
    relativeVel = targetVel - gun:getVelocity()

    local laserTime = relPos:getLength() / (storedMuzzleVel * 39.37)
    local low = math.max(0.01, laserTime / 2)
    local high = laserTime * 2
    local selfValue = 0

    targetValue = 1000
    timeOutput = low

    while math.abs(targetValue - selfValue) > 5 and math.abs(high - low) > 0.0001 do
        timeOutput = (low + high) / 2
        local predictedTargetPos = relPos + relativeVel * timeOutput + 0.5 * relativeAccel * timeOutput^2
        targetValue = predictedTargetPos:getLength() - muzzleDist

        if targetValue > maxCalculatedRange or targetValue > firingRange then return end

        selfValue = interpolateTable(dataTable, timeOutput)
        local overshootCheck = (predictedTargetPos - gun:getForward() * selfValue):dot(gun:getForward())

        if targetValue > selfValue and overshootCheck > 0 then
            low = timeOutput
        else
            high = timeOutput
        end
    end
end

------------------------------------------------------------
-- Main Think Logic
------------------------------------------------------------
local function main()
    if handleFiring then gun:acfFire(0) end
    if not initialized or targetPos == Vector() then return end

    local aimTime = timeOutput + offset + TICK
    aimposOutput = targetPos + relativeVel * aimTime + 0.5 * relativeAccel * aimTime^2

    wire.ports.Time = aimTime
    wire.ports.AimPos = aimposOutput

    if handleFiring and targetValue < firingRange and gun:acfReady() then
        local muzzleData = gun:getAttachment(gun:lookupAttachment("muzzle"))
        local muzzleVec = Vector(muzzleData[1], muzzleData[2], muzzleData[3])
        local toAim = aimposOutput - muzzleVec
        local proj = gun:getForward() * toAim:dot(gun:getForward())
        local closest = muzzleVec + proj
        local err = (aimposOutput - closest):getLength()

        if err < firingAccuracy and closest:getDistance(targetPos) > closest:getDistance(aimposOutput) then
            gun:acfFire(1)
        end
    end
end

------------------------------------------------------------
-- Wire Input Handling
------------------------------------------------------------
local function handleWire(name, value)
    if name == "Gun" then
        gun = value
        generateValues()
    elseif name == "TargetPos" then
        targetPos = value
        calculate()
    elseif name == "TargetVel" then
        targetVel = value
    end
end

------------------------------------------------------------
-- Setup Wire Ports + Retry Logic
------------------------------------------------------------
wire.adjustPorts(
    { Gun = "entity", TargetPos = "vector", TargetVel = "vector" },
    { Time = "number", AimPos = "vector" }
)

hook.add("input", "Wire Inputs Updated", handleWire)
hook.add("think", "Main Think", main)

timer.create("retry", 0.1, 0, function()
    if gun and gun:isValid() then
        if gun:acfMuzzleVel() == 0 then
            gun:acfFire(1)
        else
            gun:acfFire(0)
        end
    end
end)
